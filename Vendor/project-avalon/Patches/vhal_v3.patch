diff --git a/automotive/vehicle/aidl/impl/3/default_config/config/TestProperties.json b/automotive/vehicle/aidl/impl/3/default_config/config/TestProperties.json
old mode 100644
new mode 100755
index 73e4d44..e36589c
--- a/automotive/vehicle/aidl/impl/3/default_config/config/TestProperties.json
+++ b/automotive/vehicle/aidl/impl/3/default_config/config/TestProperties.json
@@ -180,6 +180,66 @@
             "property": "TestVendorProperty::ECHO_REVERSE_BYTES",
             "access": "VehiclePropertyAccess::READ_WRITE",
             "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+                {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_BATERRY_PROPERTY",
+            "defaultValue": {
+                 "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+         {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_Light_CONTROL_PROPERTY",
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE",
+             "defaultValue": {
+                "int32Values": [
+                    0
+                ]
+            }
+         },
+          {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_FLeft_Door_PROPERTY",
+            "defaultValue": {
+                 "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+        {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_RLeft_Door_PROPERTY",
+            "defaultValue": {
+                "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+        {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_FRight_Door_PROPERTY",
+            "defaultValue": {
+                 "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+        {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_RRight_Door_PROPERTY",
+            "defaultValue": {
+                "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
         },
         {
             "property": "TestVendorProperty::VENDOR_PROPERTY_FOR_ERROR_CODE_TESTING",
@@ -206,4 +266,4 @@
             ]
         }
     ]
-}
\ No newline at end of file
+}
diff --git a/automotive/vehicle/aidl/impl/3/fake_impl/hardware/Android.bp b/automotive/vehicle/aidl/impl/3/fake_impl/hardware/Android.bp
index 9b9b4f4..9a4fd27 100644
--- a/automotive/vehicle/aidl/impl/3/fake_impl/hardware/Android.bp
+++ b/automotive/vehicle/aidl/impl/3/fake_impl/hardware/Android.bp
@@ -63,6 +63,8 @@ cc_defaults {
         "libgrpc++",
         "libjsoncpp",
         "libprotobuf-cpp-full",
+        "libgpiohalrpi5",
+        "libgpiod",
     ],
     export_static_lib_headers: ["VehicleHalUtils-V3"],
 }
diff --git a/automotive/vehicle/aidl/impl/3/fake_impl/hardware/src/FakeVehicleHardware.cpp b/automotive/vehicle/aidl/impl/3/fake_impl/hardware/src/FakeVehicleHardware.cpp
index fbd20c5..6c2357d 100644
--- a/automotive/vehicle/aidl/impl/3/fake_impl/hardware/src/FakeVehicleHardware.cpp
+++ b/automotive/vehicle/aidl/impl/3/fake_impl/hardware/src/FakeVehicleHardware.cpp
@@ -43,6 +43,15 @@
 #include <unordered_set>
 #include <vector>
 
+#include "gpiohalrpi5.hpp"
+
+#define  FLeft_GPIO_PIN 16
+#define  RLeft_GPIO_PIN 20 
+#define  FRight_GPIO_PIN 26
+#define  RRight_GPIO_PIN 19
+#define  LED_GPIO_PIN   21
+
+
 namespace android {
 namespace hardware {
 namespace automotive {
@@ -877,6 +886,56 @@ FakeVehicleHardware::ValueResultType FakeVehicleHardware::maybeGetSpecialValue(
             return nullptr;
         case toInt(VehicleProperty::ADAPTIVE_CRUISE_CONTROL_TARGET_TIME_GAP):
             [[fallthrough]];
+            
+        case toInt(TestVendorProperty::VENDOR_EXTENSION_BATERRY_PROPERTY): {
+        // (*isSpecialValue) = true; 
+   	    // int value = 0;
+        // value = getI2c();
+        // result = mValuePool->obtainInt32(value);
+        result = mValuePool->obtainInt32(0);
+        return result;
+    }
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_FLeft_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(FLeft_GPIO_PIN);
+        gpio.getGpioValue(FLeft_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+    }   
+    
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_RLeft_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(RLeft_GPIO_PIN);
+        gpio.getGpioValue(RLeft_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+    }  
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_FRight_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(FRight_GPIO_PIN);
+        gpio.getGpioValue(FRight_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+     }   
+    
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_RRight_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(RRight_GPIO_PIN);
+        gpio.getGpioValue(RRight_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+    }
         case toInt(VehicleProperty::ADAPTIVE_CRUISE_CONTROL_LEAD_VEHICLE_MEASURED_DISTANCE): {
             isAdasPropertyAvailableResult =
                     isAdasPropertyAvailable(toInt(VehicleProperty::CRUISE_CONTROL_STATE));
@@ -1146,6 +1205,20 @@ VhalResult<void> FakeVehicleHardware::maybeSetSpecialValue(const VehiclePropValu
                        << "setting";
             }
             return {};
+            
+        case toInt(TestVendorProperty::VENDOR_EXTENSION_Light_CONTROL_PROPERTY): {
+        (*isSpecialValue) = true;
+        
+        // Extract boolean value from VehiclePropValue
+        int ledState = value.value.int32Values[0];
+        ALOGD("LED Control: Set GPIO%d to %d", LED_GPIO_PIN, ledState);
+
+        // Initialize GPIO
+        GpioHal gpio;
+        gpio.setGpioDirOut(LED_GPIO_PIN);
+        gpio.setGpioValue(LED_GPIO_PIN,ledState);
+        
+        } break;
         case toInt(VehicleProperty::ADAPTIVE_CRUISE_CONTROL_TARGET_TIME_GAP): {
             isAdasPropertyAvailableResult =
                     isAdasPropertyAvailable(toInt(VehicleProperty::CRUISE_CONTROL_STATE));
diff --git a/automotive/vehicle/aidl/impl/3/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl b/automotive/vehicle/aidl/impl/3/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl
old mode 100644
new mode 100755
index 3c877fa..837fa6b
--- a/automotive/vehicle/aidl/impl/3/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl
+++ b/automotive/vehicle/aidl/impl/3/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl
@@ -142,4 +142,46 @@ enum TestVendorProperty {
      * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.STRING
      */
     VENDOR_EXTENSION_STRING_PROPERTY = 0x103 + 0x20000000 + 0x01000000 + 0x00100000,
+    
+        /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_BATERRY_PROPERTY = 0x105 + 0x20000000 + 0x01000000 + 0x00400000,
+    /**
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_Light_CONTROL_PROPERTY = 0x0106 + 0x20000000 + 0x01000000 + 0x00400000,
+    
+         /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_FLeft_Door_PROPERTY = 0x107 + 0x20000000 + 0x01000000 + 0x00400000,
+    
+         /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_RLeft_Door_PROPERTY = 0x108 + 0x20000000 + 0x01000000 + 0x00400000,
+          /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_FRight_Door_PROPERTY = 0x109 + 0x20000000 + 0x01000000 + 0x00400000,
+    
+         /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_RRight_Door_PROPERTY = 0x10A + 0x20000000 + 0x01000000 + 0x00400000,
+    
+    
+
 }
diff --git a/automotive/vehicle/aidl/impl/current/default_config/config/TestProperties.json b/automotive/vehicle/aidl/impl/current/default_config/config/TestProperties.json
old mode 100644
new mode 100755
index 73e4d44..607b556
--- a/automotive/vehicle/aidl/impl/current/default_config/config/TestProperties.json
+++ b/automotive/vehicle/aidl/impl/current/default_config/config/TestProperties.json
@@ -175,6 +175,66 @@
             },
             "access": "VehiclePropertyAccess::READ_WRITE",
             "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+                {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_BATERRY_PROPERTY",
+            "defaultValue": {
+                 "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+         {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_Light_CONTROL_PROPERTY",
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE",
+             "defaultValue": {
+                "int32Values": [
+                    0
+                ]
+            }
+         },
+          {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_FLeft_Door_PROPERTY",
+            "defaultValue": {
+                 "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+        {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_RLeft_Door_PROPERTY",
+            "defaultValue": {
+                "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+        {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_FRight_Door_PROPERTY",
+            "defaultValue": {
+                 "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
+        },
+        {
+            "property": "TestVendorProperty::VENDOR_EXTENSION_RRight_Door_PROPERTY",
+            "defaultValue": {
+                "int32Values": [
+                    0
+                ]
+            },
+            "access": "VehiclePropertyAccess::READ_WRITE",
+            "changeMode": "VehiclePropertyChangeMode::ON_CHANGE"
         },
         {
             "property": "TestVendorProperty::ECHO_REVERSE_BYTES",
@@ -206,4 +266,4 @@
             ]
         }
     ]
-}
\ No newline at end of file
+}
diff --git a/automotive/vehicle/aidl/impl/current/fake_impl/hardware/Android.bp b/automotive/vehicle/aidl/impl/current/fake_impl/hardware/Android.bp
index 6030e15..d276c09 100644
--- a/automotive/vehicle/aidl/impl/current/fake_impl/hardware/Android.bp
+++ b/automotive/vehicle/aidl/impl/current/fake_impl/hardware/Android.bp
@@ -63,6 +63,8 @@ cc_defaults {
         "libgrpc++",
         "libjsoncpp",
         "libprotobuf-cpp-full",
+        "libgpiohalrpi5",
+        "libgpiod",
     ],
     export_static_lib_headers: ["VehicleHalUtils"],
 }
diff --git a/automotive/vehicle/aidl/impl/current/fake_impl/hardware/src/FakeVehicleHardware.cpp b/automotive/vehicle/aidl/impl/current/fake_impl/hardware/src/FakeVehicleHardware.cpp
old mode 100644
new mode 100755
index 52daf68..e9e964c
--- a/automotive/vehicle/aidl/impl/current/fake_impl/hardware/src/FakeVehicleHardware.cpp
+++ b/automotive/vehicle/aidl/impl/current/fake_impl/hardware/src/FakeVehicleHardware.cpp
@@ -43,6 +43,17 @@
 #include <unordered_set>
 #include <vector>
 
+#include "gpiohalrpi5.hpp"
+
+
+
+#define  FLeft_GPIO_PIN 16
+#define  RLeft_GPIO_PIN 20 
+#define  FRight_GPIO_PIN 26
+#define  RRight_GPIO_PIN 19
+#define  LED_GPIO_PIN   21
+
+
 namespace android {
 namespace hardware {
 namespace automotive {
@@ -867,6 +878,57 @@ FakeVehicleHardware::ValueResultType FakeVehicleHardware::maybeGetSpecialValue(
         case toInt(TestVendorProperty::VENDOR_PROPERTY_FOR_ERROR_CODE_TESTING):
             *isSpecialValue = true;
             return StatusError((StatusCode)VENDOR_ERROR_CODE);
+        
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_BATERRY_PROPERTY): {
+        // (*isSpecialValue) = true; 
+   	    // int value = 0;
+        // value = getI2c();
+        // result = mValuePool->obtainInt32(value);
+        result = mValuePool->obtainInt32(0);
+        return result;
+    }
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_FLeft_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(FLeft_GPIO_PIN);
+        gpio.getGpioValue(FLeft_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+    }   
+    
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_RLeft_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(RLeft_GPIO_PIN);
+        gpio.getGpioValue(RLeft_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+    }  
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_FRight_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(FRight_GPIO_PIN);
+        gpio.getGpioValue(FRight_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+     }   
+    
+    case toInt(TestVendorProperty::VENDOR_EXTENSION_RRight_Door_PROPERTY): {
+        (*isSpecialValue) = true;
+
+        int doorState = 0;
+        GpioHal gpio =GpioHal();
+        gpio.setGpioDirIn(RRight_GPIO_PIN);
+        gpio.getGpioValue(RRight_GPIO_PIN, &doorState);
+        result = mValuePool->obtainInt32(doorState);
+        return result;
+    }  
+      
         case toInt(VehicleProperty::CRUISE_CONTROL_TARGET_SPEED):
             isAdasPropertyAvailableResult =
                     isAdasPropertyAvailable(toInt(VehicleProperty::CRUISE_CONTROL_STATE));
@@ -1093,6 +1155,21 @@ VhalResult<void> FakeVehicleHardware::maybeSetSpecialValue(const VehiclePropValu
         case toInt(VehicleProperty::HVAC_TEMPERATURE_VALUE_SUGGESTION):
             *isSpecialValue = true;
             return setHvacTemperatureValueSuggestion(value);
+            
+	case toInt(TestVendorProperty::VENDOR_EXTENSION_Light_CONTROL_PROPERTY): {
+        (*isSpecialValue) = true;
+        
+        // Extract boolean value from VehiclePropValue
+        int ledState = value.value.int32Values[0];
+        ALOGD("LED Control: Set GPIO%d to %d", LED_GPIO_PIN, ledState);
+
+        // Initialize GPIO
+        GpioHal gpio;
+        gpio.setGpioDirOut(LED_GPIO_PIN);
+        gpio.setGpioValue(LED_GPIO_PIN,ledState);
+        
+    } break;
+        
         case toInt(VehicleProperty::HVAC_TEMPERATURE_SET):
             if (value.value.floatValues.size() != 1) {
                 *isSpecialValue = true;
diff --git a/automotive/vehicle/aidl/impl/current/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl b/automotive/vehicle/aidl/impl/current/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl
old mode 100644
new mode 100755
index 3c877fa..837fa6b
--- a/automotive/vehicle/aidl/impl/current/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl
+++ b/automotive/vehicle/aidl/impl/current/utils/test_vendor_properties/android/hardware/automotive/vehicle/TestVendorProperty.aidl
@@ -142,4 +142,46 @@ enum TestVendorProperty {
      * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.STRING
      */
     VENDOR_EXTENSION_STRING_PROPERTY = 0x103 + 0x20000000 + 0x01000000 + 0x00100000,
+    
+        /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_BATERRY_PROPERTY = 0x105 + 0x20000000 + 0x01000000 + 0x00400000,
+    /**
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_Light_CONTROL_PROPERTY = 0x0106 + 0x20000000 + 0x01000000 + 0x00400000,
+    
+         /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_FLeft_Door_PROPERTY = 0x107 + 0x20000000 + 0x01000000 + 0x00400000,
+    
+         /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_RLeft_Door_PROPERTY = 0x108 + 0x20000000 + 0x01000000 + 0x00400000,
+          /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_FRight_Door_PROPERTY = 0x109 + 0x20000000 + 0x01000000 + 0x00400000,
+    
+         /**
+     * Property used for {@code CarVendorPropertyCustomPermissionTest}.
+     *
+     * VehiclePropertyGroup.VENDOR | VehicleArea.GLOBAL | VehiclePropertyGroup.INT32
+     */
+    VENDOR_EXTENSION_RRight_Door_PROPERTY = 0x10A + 0x20000000 + 0x01000000 + 0x00400000,
+    
+    
+
 }
